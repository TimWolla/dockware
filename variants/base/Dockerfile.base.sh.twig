{% extends "template/Dockerfile.global.sh.twig" %}



{% block assets_install %}
# add our changelog to the containers
ADD ./assets/CHANGELOG.md /var/www/CHANGELOG.md
#this conf is needed for enconf command ...
ADD ./config/apache/http2.conf /etc/apache2/conf-available/http2.conf

COPY ./config/apache/apache2.conf /tmp/apache2.conf
COPY ./config/apache/ports.conf /tmp/ports.conf
COPY ./config/apache/sites.conf /tmp/sites.conf

COPY ./config/php/general.ini /tmp/general.ini
COPY ./config/php/cli.ini /tmp/cli.ini

COPY ./assets/scripts/makefile /var/www/makefile
COPY ./assets/scripts/bin /var/www/scripts/bin

{% endblock %}

{% block image_variables %}
## ***********************************************************************
##  IMAGE VARIABLES
## ***********************************************************************
{% block image_variables_main %}

{% endblock %}
{% endblock %}

{% block image_variables_export %}
 && mkdir -p /var/www \
 && mkdir -p /var/www/scripts \
 && echo "export TZ=${TZ}" >> /etc/profile \
 && echo "export PHP_VERSION=${PHP_VERSION}" >> /etc/profile \
 && echo "export APACHE_DOCROOT=${APACHE_DOCROOT}" >> /etc/profile \
 && echo "export SW_TASKS_ENABLED=${SW_TASKS_ENABLED}" >> /etc/profile \
 && echo "export COMPOSER_VERSION=${COMPOSER_VERSION}" >> /etc/profile \
 && echo "export NODE_VERSION=${NODE_VERSION}" >> /etc/profile \
 && echo "export SSH_USER=${SSH_USER}" >> /etc/profile \
 && echo "export SSH_PWD=${SSH_PWD}" >> /etc/profile \
 && echo "export VERBOSE=${VERBOSE}" >> /etc/profile \

 #do we need this any longer?
 && echo "export FILEBEAT_ENABLED=${FILEBEAT_ENABLED}" >> /etc/profile \
{% endblock %}



{% block image_components %}
## ***********************************************************************
##  BASE REQUIREMENTS
## ***********************************************************************
&& apt-get update \
    {% block base %}
    && apt-get install -y --no-install-recommends gosu \
    && apt-get install -y --no-install-recommends apt-utils \
    && apt-get install -y --no-install-recommends sudo \
    && apt-get install -y --no-install-recommends wget \
    && apt-get install -y --no-install-recommends curl \
    && apt-get install -y --no-install-recommends unzip \
    && apt-get install -y --no-install-recommends bzip2 \
    && apt-get install -y --no-install-recommends ssmtp \
    && apt-get install -y --no-install-recommends lsof \
    && apt-get install -y --no-install-recommends openssh-server \
    && apt-get install -y --no-install-recommends cron \
    && apt-get install -y --no-install-recommends vim \
    && apt-get install -y --no-install-recommends nano \
    && apt-get install -y --no-install-recommends jq \
    && apt-get install -y --no-install-recommends make \
    && apt-get install -y --no-install-recommends gnupg2 \
    && apt-get install -y --no-install-recommends gpg-agent \
    && apt-get install -y --no-install-recommends chromium-browser \
    && mkdir /var/run/sshd \
    # TIMEZONE SETTINGS
    # otherwise we would have an interactive input dialog
    && ln -fs /usr/share/zoneinfo/Europe/Berlin /etc/localtime \
    {% block base_tzdata %}
    && apt-get install -y --no-install-recommends tzdata \
    && dpkg-reconfigure --frontend noninteractive tzdata  \
    {% endblock %} \
    {% block base_xdg %}
    && apt-get install -y --no-install-recommends xdg-utils \
    {% endblock %}
    {% block base_sodium %}
    && apt-get install -y --no-install-recommends libsodium-dev \
    && apt-get install -y --no-install-recommends php-dev \
    && apt-get install -y --no-install-recommends php-pear \
    && pecl install -f libsodium \
    && apt-get remove -y php-pear \
    && apt-get remove -y php-dev \
    {% endblock %}
    {% endblock %}


{% block users %}
## ***********************************************************************
##  USER MANAGEMENT
## ***********************************************************************
{% block users_setup %}
# set easy root pwd for dev purpose
&& echo "root:root" | chpasswd \
    # set password for www-data, and also
    # avoid shell login (we have a separate user for that)
    && echo 'www-data:www-data' | chpasswd \
    && usermod -s /usr/sbin/nologin www-data \
    # this option makes sure to avoid root SSH login
    # we just replace our lines with nothing
    && sed -i 's/PermitRootLogin without-password//' /etc/ssh/sshd_config \
    && sed -i 's/PermitRootLogin prohibit-password//' /etc/ssh/sshd_config \
    # allow root and sudo group to run sudo without password
    && sed -i /etc/sudoers -re 's/^%sudo.*/%sudo ALL=(ALL:ALL) NOPASSWD: ALL/g' \
    && sed -i /etc/sudoers -re 's/^root.*/root ALL=(ALL:ALL) NOPASSWD: ALL/g' \
    # remove include directory
    && sed -i /etc/sudoers -re 's/^#includedir.*/## **Removed the include directive** ##"/g' \
{% endblock %}

{% block users_ssh_add %}
{% include 'template/components/ssh/add_user.sh.twig' with {'user': ssh.user.name, 'pwd' : ssh.user.pwd, 'sudo' : true } %}
{% endblock %}

{% block users_ssh_connection %}
&& echo 'AllowUsers {{ ssh.user.name }}' >> /etc/ssh/sshd_config \
{% endblock %}

{% block users_bashrc %}
    # add bashrc for www-data
    #make sure the directory exists always
    && echo "" >> /var/www/.bashrc \
    {% block nvm_bash_rc %}
    && echo "source /var/www/.nvm/nvm.sh" >> /var/www/.bashrc \
    {% endblock %}
    # -------------------------------------------------
    && chown 33:33 /var/www/.bashrc \
    # -------------------------------------------------
    && echo "export BASH_ENV=${BASH_ENV}" >> /etc/profile \
{% endblock %}


{% endblock %}


{% block apache %}
## ***********************************************************************
##  APACHE INSTALLATION
## ***********************************************************************

{% include 'template/components/apache2/install.sh.twig' %}

#need to be added after installation
&& cat /tmp/apache2.conf >| /etc/apache2/apache2.conf \
&& cat /tmp/ports.conf >| /etc/apache2/ports.conf \
&& cat /tmp/sites.conf >| /etc/apache2/sites-enabled/000-default.conf \

{% endblock %}

# create a new id_rsa for the www-data dockeruser.
# thus we have a SSH Key for connections out of the box
{% set id_rsa_vars = { 'user' : 'www-data', 'group' : 'www-data', 'directory': '/var/www/.ssh', 'comment' : 'Dockware Container'} %}
{% include 'template/components/ssh/create_key.sh.twig' with id_rsa_vars %}



{% block php %}
## ***********************************************************************
##  PHP INSTALLATION
## ***********************************************************************
{% for key,value in php.versions %}
{% if value.active == true %}
{% include "template/components/php/#{ key }/install.sh.twig" %}

&& cat /tmp/general.ini >| /etc/php/{{ key }}/fpm/conf.d/01-general.ini \
&& cat /tmp/general.ini >| /etc/php/{{ key }}/cli/conf.d/01-general.ini \
&& cat /tmp/cli.ini >| /etc/php/{{ key }}/cli/conf.d/01-general-cli.ini \

{% endif %}
{% endfor %}

# remove pecl again
&& apt-get remove -y dh-php \

#make sure the installation runs also in default php version
&& sudo update-alternatives --set php /usr/bin/php{{ php.default_version }} > /dev/null 2>&1 \
# make sure the installation runs using our default php version
&& service php{{ php.default_version }}-fpm stop > /dev/null 2>&1 && \
    service php{{ php.default_version }}-fpm start && \
    sudo update-alternatives --set php /usr/bin/php{{ php.default_version }} > /dev/null 2>&1 \


# make sure our php user has rights on the session
&& chown www-data:www-data -R /var/lib/php/sessions \
{% endblock %}

# remove the standard apache index file
&& mkdir -p /var/www/html \
    && rm -rf /var/www/html/* \
    && chown -R www-data:www-data /var/www/html \
    && sudo -u www-data sh -c 'mkdir -p /var/www/html/public' \


{% block permissions %}
# make sure the configured log folder exists and is writeable
&& chmod -R 0777 /var/www \
    && chgrp -R www-data /var/log/apache2 \
    && mkdir -p /var/log/mysql \
    && chgrp -R www-data /var/log/mysql\
    && mkdir /var/log/php -p  \
    && touch /var/log/php/cli_errors.log  \
    && touch /var/log/php/fpm_errors.log  \
    && chown -R www-data:www-data /var/log/php  \
    && chmod 0755 /var/log/php \
{% endblock %}

{% block ssl %}
## ***********************************************************************
##  MOD_SSL
##  create SSL certificate
## ***********************************************************************
    && apt-get install -y --no-install-recommends openssl \
    && a2enmod ssl \
    && mkdir /etc/apache2/ssl \
    && openssl req -new -x509 -days 365 -sha1 -newkey rsa:2048 -nodes -keyout /etc/apache2/ssl/server.key -out /etc/apache2/ssl/server.crt -subj '/O=Company/OU=Department/CN=localhost' \
{% endblock %}



{% block components_dev_tools %}
    && apt-get install -y --no-install-recommends rsync \
    && apt-get install -y --no-install-recommends sshpass \
    && apt-get install -y --no-install-recommends jpegoptim \
    && apt-get install -y --no-install-recommends screen \
    && apt-get install -y --no-install-recommends mysql-client \
    && apt-get install -y --no-install-recommends daemon \
{% endblock %}

{% block components_git %}
    && apt-get install -y --no-install-recommends git \
{% endblock %}


{% include 'template/components/composer/v2/install.sh.twig' %}


{% block additional %}{% endblock %}

&& chown www-data:www-data -R /var/www/scripts \
#not needed in base_play as there are no sh files ...
#&&  chmod 755 /*.sh \
# unsinstall
# we don't use snapd manager and it uses 100MB of image space

#uninstall all not needed packages
&& apt-get remove --purge --assume-yes snapd \
# Remove user snap directory.
&& rm -rf ~/snap/ \
# Remove cache directory for snapd
&& rm -rf /var/cache/snapd/ \

&& apt-get remove --purge --assume-yes python3* \

{% endblock %}