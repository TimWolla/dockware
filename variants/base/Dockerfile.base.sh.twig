{% extends "template/Dockerfile.global.sh.twig" %}



{% block assets_install %}
# add our changelog to the containers
ADD ./assets/CHANGELOG.md /var/www/CHANGELOG.md
#this conf is needed for enconf command ...
ADD ./config/apache/http2.conf /etc/apache2/conf-available/http2.conf



COPY ./config/tideways/tideways.ini /tmp/20-tideways.ini
COPY ./config/php/xdebug-2.ini /tmp/xdebug-2.ini
COPY ./config/php/xdebug-3.ini /tmp/xdebug-3.ini

COPY ./config/apache/apache2.conf /tmp/apache2.conf
COPY ./config/apache/ports.conf /tmp/ports.conf
COPY ./config/apache/sites.conf /tmp/sites.conf

COPY ./config/php/general.ini /tmp/general.ini
COPY ./config/php/cli.ini /tmp/cli.ini

COPY ./config/tideways/tideways-daemon /etc/default/tideways-daemon
COPY ./assets/tideways/tideways-daemon /etc/init.d/tideways-daemon

COPY ./assets/scripts/makefile /var/www/makefile
COPY ./assets/scripts/bin /var/www/scripts/bin

{% endblock %}

{% block image_variables %}
## ***********************************************************************
##  IMAGE VARIABLES
## ***********************************************************************
{% block image_variables_main %}
ENV TZ Europe/Berlin
ENV PHP_VERSION {{php.default_version}}
ENV APACHE_DOCROOT {{ apache.docroot }}
ENV SW_TASKS_ENABLED 0
ENV COMPOSER_VERSION not-set
ENV NODE_VERSION {{ node.version }}
ENV SSH_USER not-set
ENV SSH_PWD not-set
ENV XDEBUG_REMOTE_HOST "host.docker.internal"
ENV XDEBUG_CONFIG "idekey=PHPSTORM"
ENV PHP_IDE_CONFIG "serverName=localhost"
ENV XDEBUG_ENABLED 0
ENV FILEBEAT_ENABLED 0
ENV TIDEWAYS_KEY not-set
ENV TIDEWAYS_ENV production
ENV TIDEWAYS_SERVICE web
ENV BASH_ENV /var/www/.bashrc
ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH      $NVM_DIR/v$NODE_VERSION/bin:$PATH
{% endblock %}
{% endblock %}

{% block image_variables_export %}
 && mkdir -p /var/www \
 && mkdir -p /var/www/scripts \
 && echo "export TZ=${TZ}" >> /etc/profile \
 && echo "export PHP_VERSION=${PHP_VERSION}" >> /etc/profile \
 && echo "export APACHE_DOCROOT=${APACHE_DOCROOT}" >> /etc/profile \
 && echo "export SW_TASKS_ENABLED=${SW_TASKS_ENABLED}" >> /etc/profile \
 && echo "export COMPOSER_VERSION=${COMPOSER_VERSION}" >> /etc/profile \
 && echo "export NODE_VERSION=${NODE_VERSION}" >> /etc/profile \
 && echo "export SSH_USER=${SSH_USER}" >> /etc/profile \
 && echo "export SSH_PWD=${SSH_PWD}" >> /etc/profile \
 && echo "export XDEBUG_ENABLED=${XDEBUG_ENABLED}" >> /etc/profile \
 && echo "export XDEBUG_REMOTE_HOST=${XDEBUG_REMOTE_HOST}" >> /etc/profile \
 && echo "export XDEBUG_CONFIG=${XDEBUG_CONFIG}" >> /etc/profile \
 && echo "export PHP_IDE_CONFIG=${PHP_IDE_CONFIG}" >> /etc/profile \
 #do we need this any longer?
 && echo "export FILEBEAT_ENABLED=${FILEBEAT_ENABLED}" >> /etc/profile \
 && echo "export TIDEWAYS_KEY=${TIDEWAYS_KEY}" >> /etc/profile \
 && echo "export TIDEWAYS_ENV=${TIDEWAYS_ENV}" >> /etc/profile \
 && echo "export TIDEWAYS_SERVICE=${TIDEWAYS_SERVICE}" >> /etc/profile \
{% endblock %}



{% block components %}
## ***********************************************************************
##  BASE REQUIREMENTS
## ***********************************************************************
&& apt-get update \
    {% block base %}
    && apt-get install -y gosu \
    && apt-get install -y sudo \
    && apt-get install -y wget \
    && apt-get install -y curl \
    && apt-get install -y unzip \
    && apt-get install -y bzip2 \
    && apt-get install -y ssmtp \
    && apt-get install -y lsof \
    && apt-get install -y openssh-server \
    && apt-get install -y cron \
    && apt-get install -y vim \
    && apt-get install -y nano \
    && apt-get install -y jq \
    && apt-get install -y gnupg2 \
    && apt-get install -y gpg-agent \
    && apt-get install -y chromium-browser \
    && mkdir /var/run/sshd \
    # TIMEZONE SETTINGS
    # otherwise we would have an interactive input dialog
    && ln -fs /usr/share/zoneinfo/Europe/Berlin /etc/localtime \
    {% block base_tzdata %}
    && apt-get install -y tzdata \
    && dpkg-reconfigure --frontend noninteractive tzdata  \
    {% endblock %} \
    {% block base_xdg %}
    && apt-get install -y xdg-utils \
    {% endblock %}
    {% block base_sodium %}
    && apt-get install -y libsodium-dev \
    && apt-get install -y php-dev \
    && apt-get install -y php-pear \
    && pecl install -f libsodium \
    && apt-get remove -y php-pear \
    && apt-get remove -y php-dev \
    {% endblock %}
    {% endblock %}


{% block users %}
## ***********************************************************************
##  USER MANAGEMENT
## ***********************************************************************
{% block users_setup %}
# set easy root pwd for dev purpose
&& echo "root:root" | chpasswd \
    # set password for www-data, and also
    # avoid shell login (we have a separate user for that)
    && echo 'www-data:www-data' | chpasswd \
    && usermod -s /usr/sbin/nologin www-data \
    # this option makes sure to avoid root SSH login
    # we just replace our lines with nothing
    && sed -i 's/PermitRootLogin without-password//' /etc/ssh/sshd_config \
    && sed -i 's/PermitRootLogin prohibit-password//' /etc/ssh/sshd_config \
    # allow root and sudo group to run sudo without password
    && sed -i /etc/sudoers -re 's/^%sudo.*/%sudo ALL=(ALL:ALL) NOPASSWD: ALL/g' \
    && sed -i /etc/sudoers -re 's/^root.*/root ALL=(ALL:ALL) NOPASSWD: ALL/g' \
    # remove include directory
    && sed -i /etc/sudoers -re 's/^#includedir.*/## **Removed the include directive** ##"/g' \
{% endblock %}

{% block users_ssh_add %}
{% include 'template/components/ssh/add_user.sh.twig' with {'user': ssh.user.name, 'pwd' : ssh.user.pwd, 'sudo' : true } %}
{% endblock %}

{% block users_ssh_connection %}
&& echo 'AllowUsers {{ ssh.user.name }}' >> /etc/ssh/sshd_config \
{% endblock %}

{% block users_bashrc %}
&& echo "source /var/www/.nvm/nvm.sh" >> /var/www/.bashrc \
    # -------------------------------------------------
    && chown 33:33 /var/www/.bashrc \
    # -------------------------------------------------
    && echo "export BASH_ENV=${BASH_ENV}" >> /etc/profile \
{% endblock %}


{% endblock %}


{% block apache %}
## ***********************************************************************
##  APACHE INSTALLATION
## ***********************************************************************

{% include 'template/components/apache2/install.sh.twig' %}

#need to be added after installation
&& cat /tmp/apache2.conf >| /etc/apache2/apache2.conf \
&& cat /tmp/ports.conf >| /etc/apache2/ports.conf \
&& cat /tmp/sites.conf >| /etc/apache2/sites-enabled/000-default.conf \

{% endblock %}

# create a new id_rsa for the www-data dockeruser.
# thus we have a SSH Key for connections out of the box
{% set id_rsa_vars = { 'user' : 'www-data', 'group' : 'www-data', 'directory': '/var/www/.ssh', 'comment' : 'Dockware Container'} %}
{% include 'template/components/ssh/create_key.sh.twig' with id_rsa_vars %}



{% block php %}
## ***********************************************************************
##  PHP INSTALLATION
## ***********************************************************************
{% for key,value in php.versions %}
{% if value.active == true %}
{% include "template/components/php/#{ key }/install.sh.twig" %}

&& cat /tmp/general.ini >| /etc/php/{{ key }}/fpm/conf.d/01-general.ini \
&& cat /tmp/general.ini >| /etc/php/{{ key }}/cli/conf.d/01-general.ini \
&& cat /tmp/cli.ini >| /etc/php/{{ key }}/cli/conf.d/01-general-cli.ini \

{% endif %}
{% endfor %}

# remove pecl again
&& apt-get remove -y dh-php \

#make sure the installation runs also in default php version
&& sudo update-alternatives --set php /usr/bin/php{{ php.default_version }} > /dev/null 2>&1 \
# make sure the installation runs using our default php version
&& service php{{ php.default_version }}-fpm stop > /dev/null 2>&1 && \
    service php{{ php.default_version }}-fpm start && \
    sudo update-alternatives --set php /usr/bin/php{{ php.default_version }} > /dev/null 2>&1 \


# make sure our php user has rights on the session
&& chown www-data:www-data -R /var/lib/php/sessions \
{% endblock %}

# remove the standard apache index file
&& mkdir -p /var/www/html \
    && rm -rf /var/www/html/* \
    && chown -R www-data:www-data /var/www/html \
    && sudo -u www-data sh -c 'mkdir -p /var/www/html/public' \


{% block permissions %}
# make sure the configured log folder exists and is writeable
&& chmod -R 0777 /var/www \
    && chgrp -R www-data /var/log/apache2 \
    && mkdir -p /var/log/mysql \
    && chgrp -R www-data /var/log/mysql\
    && mkdir /var/log/php -p  \
    && touch /var/log/php/cli_errors.log  \
    && touch /var/log/php/fpm_errors.log  \
    && chown -R www-data:www-data /var/log/php  \
    && chmod 0755 /var/log/php \
{% endblock %}

{% block ssl %}
## ***********************************************************************
##  MOD_SSL
##  create SSL certificate
## ***********************************************************************
    && apt-get install -y openssl \
    && a2enmod ssl \
    && mkdir /etc/apache2/ssl \
    && openssl req -new -x509 -days 365 -sha1 -newkey rsa:2048 -nodes -keyout /etc/apache2/ssl/server.key -out /etc/apache2/ssl/server.crt -subj '/O=Company/OU=Department/CN=localhost' \
{% endblock %}



{% block components_dev_tools %}
    && apt-get install -y rsync \
    && apt-get install -y sshpass \
    && apt-get install -y jpegoptim \
    && apt-get install -y screen \
    && apt-get install -y mysql-client \
    && apt-get install -y daemon \
{% endblock %}

{% block components_git %}
    && apt-get install -y git \
{% endblock %}


{% block components_packagers %}
{% block components_packagers_composer %}
{% if composer.version == 1 %}
{% include 'template/components/composer/v1/install.sh.twig' %}
{% else %}
{% include 'template/components/composer/v2/install.sh.twig' %}
{% endif %}
{% endblock %}



{% endblock %}


{% block components_xdebug %}
{% include 'template/components/xdebug/base.sh.twig' %}
{% endblock %}

{% block components_nvm %}
&& ls -la \
    && mkdir "/var/www/.nvm" \
    && export NVM_DIR="/var/www/.nvm" \
    # -----------------------------------------------------------------------------------------
    && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash \
    # -----------------------------------------------------------------------------------------
    && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" \
    && [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  \
    # -----------------------------------------------------------------------------------------
    && nvm install 16 \
    && nvm install 14 \
    && nvm install 12 \
    # -----------------------------------------------------------------------------------------
    # we have to install yarn in additional node versions
    # otherwise it won't be found after a nvm switch
    && nvm use 14 && npm install -g yarn \
    && nvm use 16 && npm install -g yarn \
    # -----------------------------------------------------------------------------------------
    && nvm use {{ node.version }} \
    && nvm alias default {{ node.version }}  \
    # -----------------------------------------------------------------------------------------
{% endblock %}

{% block components_node %}
    # -----------------------------------------------------------
    # we have to reload the correct nvm version otherwise this would destroy it
    && export NVM_DIR="/var/www/.nvm" \
    && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" \
    && [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  \
    && nvm use {{ node.version }} \
    # -----------------------------------------------------------
    && mkdir /var/www/.npm \
    && npm config set cache /var/www/.npm \
    && chown 33:33 /var/www/.npm \
{% endblock %}

{% block components_grunt %}
    # navigate to another folder outside shopware to avoid this error: npm ERR! Tracker "idealTree" already exists
    && cd /var/www && npm install -g grunt-cli \
    && cd /var/www && npm install grunt --save-dev \
{% endblock %}

{% block components_packagers_yarn %}
    && npm install -g --no-install-recommends yarn \
    && chown -R www-data:www-data /var/www/.composer \
{% endblock %}

{% block components_tideways %}
&& sudo echo 'deb https://packages.tideways.com/apt-packages-main any-version main' | sudo tee /etc/apt/sources.list.d/tideways.list \
    && sudo wget -qO - https://packages.tideways.com/key.gpg | sudo apt-key add - \
    && sudo apt-get -y update  \
    && sudo apt-get -y install tideways-php tideways-daemon  \
    {% for key,value in php.versions %}
    && cat /tmp/20-tideways.ini >| /etc/php/{{ key }}/fpm/conf.d/20-tideways.ini \
    && cat /tmp/20-tideways.ini >| /etc/php/{{ key }}/cli/conf.d/20-tideways.ini \
    {% endfor %}
    #clean up layer
    && rm -rf /var/lib/apt/lists/* /var/cache/apt/* \
    && sudo chmod 0755 /etc/init.d/tideways-daemon \
{% endblock %}
&& echo ""


&& chown www-data:www-data -R /var/www/scripts \
&&  chmod 755 /*.sh \
{% endblock %}